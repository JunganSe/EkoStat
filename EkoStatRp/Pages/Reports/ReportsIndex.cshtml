@page "/Reports"
@model EkoStatRp.Pages.Reports.ReportsIndex
@using EkoStatLibrary.Enums
@using EkoStatLibrary.Extensions.DtoExtensions
@using EkoStatLibrary.Models
@{
    ViewData["Title"] = "Reports";
    var start = Model.Segments.GetEarliestStart() ?? new DateTime();
    var end = Model.Segments.GetLatestEnd() ?? new DateTime();
    var timePeriod = new TimePeriod(start, end);
    int articlesCount = Model.Segments.GetArticlesCount();
    int entriesCount = Model.Segments.GetEntriesCount();
    var totalCost = Model.Segments.GetTotalCost();
    int skippedSegmentsCount = 0;
    string highlightMessage = Model.ReportForm.CostLimitType switch
    {
        LimitType.Fixed => $"Highlighting articles with a total cost of {Model.ReportForm.CostLimit} or more.",
        LimitType.Percentile => $"Highlighting articles with a total cost at or above the {Model.ReportForm.CostLimit}th percentile for that period.",
        _ => ""
    };
}

<h1>Reports</h1>
<a asp-page="@Constants.RazorPages.ReportsSaved">Saved reports</a>

<!-- Formulär -->
<form method="post">
    <!-- Filtrering -->
    <hr />
    <h2>Filter</h2>
    <partial name="@Constants.PartialViews.FilterEntries" model="@Model.FilterViewModel" />

    <hr />
    <h2>Report settings</h2>

    <!-- Markera rader med kostnad över gränsvärde -->
    <div class="flexRow">
        <div>
            <label asp-for="@Model.ReportForm.CostLimit"></label>
            <input asp-for="@Model.ReportForm.CostLimit" />
            <span asp-validation-for="@Model.ReportForm.CostLimit" class="text-danger"></span>
        </div>
        <div>
            <label asp-for="@Model.ReportForm.CostLimitType"></label>
            <select asp-for="@Model.ReportForm.CostLimitType">
                @foreach (var costLimitType in Enum.GetValues(typeof(LimitType)))
                {
                    <option value="@costLimitType">@costLimitType</option>
                }
            </select>
            <span asp-validation-for="@Model.ReportForm.CostLimitType" class="text-danger"></span>
        </div>
    </div>

    <!-- Segmentering -->
    <div>
        <label asp-for="@Model.ReportForm.SegmentBy"></label>
        <select asp-for="@Model.ReportForm.SegmentBy">
            @foreach (var segmentSize in Enum.GetValues(typeof(SegmentSize)))
            {
                <option value="@segmentSize">@segmentSize</option>
            }
        </select>
        <span asp-validation-for="@Model.ReportForm.SegmentBy" class="text-danger"></span>
    </div>

    <button type="submit">Generate report</button>
</form>

<!-- Visning -->
@if (entriesCount > 0)
{
    <hr />
    <h2>Summary</h2>
    <p>
        Showing @articlesCount articles from @entriesCount entries <br />
        from @timePeriod.Start.ToShortDateString() until @timePeriod.End.ToShortDateString() <br />
        which is @timePeriod.Years years, @timePeriod.Months months, and @timePeriod.Days days<br />
        with a total cost of @totalCost
    </p>
    if (Model.ReportForm.CostLimit != null)
    {
        <p>@highlightMessage</p>
    }

    <hr />
    <h2>Articles</h2>
    @foreach (var segment in Model.Segments)
    {
        if (!segment.EntryGroups.Any())
        {
            skippedSegmentsCount++;
            continue;
        }

        @if (skippedSegmentsCount > 0)
        {
            string segmentWording = (skippedSegmentsCount > 1) ? "periods" : "period";
            <p><br/>(Skipped @skippedSegmentsCount empty @segmentWording)</p>
            skippedSegmentsCount = 0;
        }

        string startDate = segment.TimePeriod.Start.ToShortDateString();
        string endDate = segment.TimePeriod.End.AddMilliseconds(-1).ToShortDateString();
        int daysCount = segment.TimePeriod.TotalDays;
        <h3>@startDate to @endDate (@daysCount days)</h3>
        <div>@segment.ArticlesCount articles, Total cost: @segment.TotalCost</div>

        <table class="table-bordered">
            <thead>
                <tr>
                    <th>Article</th>
                    <th>Count</th>
                    <th>Total cost</th>
                    <th>Tags</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in segment.EntryGroups)
                {
                    string highlight = (group.TotalCost >= segment.CostThreshold) ? "highlightRow" : "";
                    <tr class="@highlight">
                        <td>@group.Article.Name</td>
                        <td>@group.TotalCount</td>
                        <td>@group.TotalCost</td>
                        <td>@group.Article.Tags.GetNamesAsString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
